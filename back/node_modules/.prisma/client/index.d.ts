
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Turn: {
  LOBBY: 'LOBBY',
  DAY: 'DAY',
  VOTE: 'VOTE',
  NIGHT: 'NIGHT'
};

export type Turn = (typeof Turn)[keyof typeof Turn]


export const Team: {
  GOVERNMENT: 'GOVERNMENT',
  REBEL: 'REBEL',
  SOLO: 'SOLO'
};

export type Team = (typeof Team)[keyof typeof Team]


export const EliminatedBy: {
  VOTE: 'VOTE',
  ATTACK: 'ATTACK',
  OVERDOSE: 'OVERDOSE'
};

export type EliminatedBy = (typeof EliminatedBy)[keyof typeof EliminatedBy]


export const InjectionType: {
  ATTACK: 'ATTACK',
  DEFENSE: 'DEFENSE'
};

export type InjectionType = (typeof InjectionType)[keyof typeof InjectionType]


export const PotionType: {
  RED: 'RED',
  BLACK: 'BLACK'
};

export type PotionType = (typeof PotionType)[keyof typeof PotionType]


export const Aura: {
  GOOD: 'GOOD',
  EVIL: 'EVIL',
  UNKNOWN: 'UNKNOWN'
};

export type Aura = (typeof Aura)[keyof typeof Aura]

}

export type Turn = $Enums.Turn

export const Turn: typeof $Enums.Turn

export type Team = $Enums.Team

export const Team: typeof $Enums.Team

export type EliminatedBy = $Enums.EliminatedBy

export const EliminatedBy: typeof $Enums.EliminatedBy

export type InjectionType = $Enums.InjectionType

export const InjectionType: typeof $Enums.InjectionType

export type PotionType = $Enums.PotionType

export const PotionType: typeof $Enums.PotionType

export type Aura = $Enums.Aura

export const Aura: typeof $Enums.Aura

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Room: 'Room',
    Message: 'Message',
    Player: 'Player',
    Role: 'Role'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'profile' | 'room' | 'message' | 'player' | 'role'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>,
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>,
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    players: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | ProfileCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }



  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    players: number
    messages: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | RoomCountOutputTypeCountPlayersArgs
    messages?: boolean | RoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    messages: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | PlayerCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    players: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | RoleCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    xp: number | null
    wins: number | null
    loses: number | null
    quits: number | null
    deaths: number | null
  }

  export type ProfileSumAggregateOutputType = {
    xp: number | null
    wins: number | null
    loses: number | null
    quits: number | null
    deaths: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    bio: string | null
    name: string | null
    userId: string | null
    xp: number | null
    gender: string | null
    wins: number | null
    loses: number | null
    quits: number | null
    deaths: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    bio: string | null
    name: string | null
    userId: string | null
    xp: number | null
    gender: string | null
    wins: number | null
    loses: number | null
    quits: number | null
    deaths: number | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    bio: number
    name: number
    userId: number
    xp: number
    gender: number
    wins: number
    loses: number
    quits: number
    deaths: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    xp?: true
    wins?: true
    loses?: true
    quits?: true
    deaths?: true
  }

  export type ProfileSumAggregateInputType = {
    xp?: true
    wins?: true
    loses?: true
    quits?: true
    deaths?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    bio?: true
    name?: true
    userId?: true
    xp?: true
    gender?: true
    wins?: true
    loses?: true
    quits?: true
    deaths?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    bio?: true
    name?: true
    userId?: true
    xp?: true
    gender?: true
    wins?: true
    loses?: true
    quits?: true
    deaths?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    bio?: true
    name?: true
    userId?: true
    xp?: true
    gender?: true
    wins?: true
    loses?: true
    quits?: true
    deaths?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    bio: string | null
    name: string
    userId: string
    xp: number
    gender: string
    wins: number | null
    loses: number | null
    quits: number | null
    deaths: number | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bio?: boolean
    name?: boolean
    userId?: boolean
    xp?: boolean
    gender?: boolean
    wins?: boolean
    loses?: boolean
    quits?: boolean
    deaths?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Profile$playersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    bio?: boolean
    name?: boolean
    userId?: boolean
    xp?: boolean
    gender?: boolean
    wins?: boolean
    loses?: boolean
    quits?: boolean
    deaths?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Profile$playersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      players: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bio: string | null
      name: string
      userId: string
      xp: number
      gender: string
      wins: number | null
      loses: number | null
      quits: number | null
      deaths: number | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }


  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    players<T extends Profile$playersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly bio: FieldRef<"Profile", 'String'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly xp: FieldRef<"Profile", 'Int'>
    readonly gender: FieldRef<"Profile", 'String'>
    readonly wins: FieldRef<"Profile", 'Int'>
    readonly loses: FieldRef<"Profile", 'Int'>
    readonly quits: FieldRef<"Profile", 'Int'>
    readonly deaths: FieldRef<"Profile", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile.players
   */
  export type Profile$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
  }



  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    turnNumber: number | null
  }

  export type RoomSumAggregateOutputType = {
    turnNumber: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: string | null
    turn: $Enums.Turn | null
    turnNumber: number | null
    startedAt: Date | null
    hasVote: boolean | null
    voteAnon: boolean | null
    finished: boolean | null
    winner: $Enums.Team | null
    soloWinner: string | null
    actualTurnStartedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    id: string | null
    turn: $Enums.Turn | null
    turnNumber: number | null
    startedAt: Date | null
    hasVote: boolean | null
    voteAnon: boolean | null
    finished: boolean | null
    winner: $Enums.Team | null
    soloWinner: string | null
    actualTurnStartedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    turn: number
    turnNumber: number
    startedAt: number
    hasVote: number
    voteAnon: number
    finished: number
    winner: number
    soloWinner: number
    actualTurnStartedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    turnNumber?: true
  }

  export type RoomSumAggregateInputType = {
    turnNumber?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    turn?: true
    turnNumber?: true
    startedAt?: true
    hasVote?: true
    voteAnon?: true
    finished?: true
    winner?: true
    soloWinner?: true
    actualTurnStartedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    turn?: true
    turnNumber?: true
    startedAt?: true
    hasVote?: true
    voteAnon?: true
    finished?: true
    winner?: true
    soloWinner?: true
    actualTurnStartedAt?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    turn?: true
    turnNumber?: true
    startedAt?: true
    hasVote?: true
    voteAnon?: true
    finished?: true
    winner?: true
    soloWinner?: true
    actualTurnStartedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: string
    turn: $Enums.Turn
    turnNumber: number
    startedAt: Date | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner: $Enums.Team | null
    soloWinner: string | null
    actualTurnStartedAt: Date | null
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    turn?: boolean
    turnNumber?: boolean
    startedAt?: boolean
    hasVote?: boolean
    voteAnon?: boolean
    finished?: boolean
    winner?: boolean
    soloWinner?: boolean
    actualTurnStartedAt?: boolean
    players?: boolean | Room$playersArgs<ExtArgs>
    messages?: boolean | Room$messagesArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    turn?: boolean
    turnNumber?: boolean
    startedAt?: boolean
    hasVote?: boolean
    voteAnon?: boolean
    finished?: boolean
    winner?: boolean
    soloWinner?: boolean
    actualTurnStartedAt?: boolean
  }

  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | Room$playersArgs<ExtArgs>
    messages?: boolean | Room$messagesArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      players: Prisma.$PlayerPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      turn: $Enums.Turn
      turnNumber: number
      startedAt: Date | null
      hasVote: boolean
      voteAnon: boolean
      finished: boolean
      winner: $Enums.Team | null
      soloWinner: string | null
      actualTurnStartedAt: Date | null
    }, ExtArgs["result"]["room"]>
    composites: {}
  }


  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Room that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomCreateArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    players<T extends Room$playersArgs<ExtArgs> = {}>(args?: Subset<T, Room$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    messages<T extends Room$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Room$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Room model
   */ 
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'String'>
    readonly turn: FieldRef<"Room", 'Turn'>
    readonly turnNumber: FieldRef<"Room", 'Int'>
    readonly startedAt: FieldRef<"Room", 'DateTime'>
    readonly hasVote: FieldRef<"Room", 'Boolean'>
    readonly voteAnon: FieldRef<"Room", 'Boolean'>
    readonly finished: FieldRef<"Room", 'Boolean'>
    readonly winner: FieldRef<"Room", 'Team'>
    readonly soloWinner: FieldRef<"Room", 'String'>
    readonly actualTurnStartedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
  }


  /**
   * Room.players
   */
  export type Room$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Room.messages
   */
  export type Room$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    content: string | null
    roomId: string | null
    authorId: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    content: string | null
    roomId: string | null
    authorId: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    createdAt: number
    content: number
    roomId: number
    authorId: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    roomId?: true
    authorId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    roomId?: true
    authorId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    roomId?: true
    authorId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    createdAt: Date
    content: string
    roomId: string
    authorId: string
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    content?: boolean
    roomId?: boolean
    authorId?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    author?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    content?: boolean
    roomId?: boolean
    authorId?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    author?: boolean | PlayerDefaultArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      author: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      content: string
      roomId: string
      authorId: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    author<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly content: FieldRef<"Message", 'String'>
    readonly roomId: FieldRef<"Message", 'String'>
    readonly authorId: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    index: number | null
    voteIn: number | null
    life: number | null
    shield: number | null
    votesReceived: number | null
    voteWeight: number | null
    attackedBy: number | null
  }

  export type PlayerSumAggregateOutputType = {
    index: number | null
    voteIn: number | null
    life: number | null
    shield: number | null
    votesReceived: number | null
    voteWeight: number | null
    attackedBy: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: string | null
    roomId: string | null
    profileId: string | null
    socketId: string | null
    canTalk: boolean | null
    index: number | null
    voteIn: number | null
    life: number | null
    shield: number | null
    isProtected: boolean | null
    alive: boolean | null
    revived: boolean | null
    online: boolean | null
    roleId: string | null
    votesReceived: number | null
    voteWeight: number | null
    roleVisibility: boolean | null
    elimination: $Enums.EliminatedBy | null
    isJailed: boolean | null
    isTrapped: boolean | null
    roleStolen: boolean | null
    isDrugged: boolean | null
    druggedBy: boolean | null
    injected: $Enums.InjectionType | null
    voteProtection: boolean | null
    roleVisibilityProtectedWhenDead: boolean | null
    corrupted: boolean | null
    bhTarget: boolean | null
    potionReceived: $Enums.PotionType | null
    attackedBy: number | null
    abilitiesEnabled: boolean | null
    canVote: boolean | null
    checkedByAnalyst: boolean | null
    checkedByDetective: boolean | null
    vigiKill: boolean | null
    vigiReveal: boolean | null
    abilityConsumed: boolean | null
    attacked: boolean | null
    trapActive: boolean | null
    playerTrapped: string | null
    soldierAttacked: boolean | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: string | null
    roomId: string | null
    profileId: string | null
    socketId: string | null
    canTalk: boolean | null
    index: number | null
    voteIn: number | null
    life: number | null
    shield: number | null
    isProtected: boolean | null
    alive: boolean | null
    revived: boolean | null
    online: boolean | null
    roleId: string | null
    votesReceived: number | null
    voteWeight: number | null
    roleVisibility: boolean | null
    elimination: $Enums.EliminatedBy | null
    isJailed: boolean | null
    isTrapped: boolean | null
    roleStolen: boolean | null
    isDrugged: boolean | null
    druggedBy: boolean | null
    injected: $Enums.InjectionType | null
    voteProtection: boolean | null
    roleVisibilityProtectedWhenDead: boolean | null
    corrupted: boolean | null
    bhTarget: boolean | null
    potionReceived: $Enums.PotionType | null
    attackedBy: number | null
    abilitiesEnabled: boolean | null
    canVote: boolean | null
    checkedByAnalyst: boolean | null
    checkedByDetective: boolean | null
    vigiKill: boolean | null
    vigiReveal: boolean | null
    abilityConsumed: boolean | null
    attacked: boolean | null
    trapActive: boolean | null
    playerTrapped: string | null
    soldierAttacked: boolean | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    roomId: number
    profileId: number
    socketId: number
    canTalk: number
    index: number
    voteIn: number
    life: number
    shield: number
    isProtected: number
    alive: number
    revived: number
    online: number
    roleId: number
    votesReceived: number
    voteWeight: number
    roleVisibility: number
    elimination: number
    isJailed: number
    isTrapped: number
    roleStolen: number
    isDrugged: number
    druggedBy: number
    injected: number
    voteProtection: number
    roleVisibilityProtectedWhenDead: number
    corrupted: number
    bhTarget: number
    potionReceived: number
    attackedBy: number
    abilitiesEnabled: number
    canVote: number
    checkedByAnalyst: number
    checkedByDetective: number
    vigiKill: number
    vigiReveal: number
    abilityConsumed: number
    attacked: number
    trapActive: number
    playerTrapped: number
    soldierAttacked: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    index?: true
    voteIn?: true
    life?: true
    shield?: true
    votesReceived?: true
    voteWeight?: true
    attackedBy?: true
  }

  export type PlayerSumAggregateInputType = {
    index?: true
    voteIn?: true
    life?: true
    shield?: true
    votesReceived?: true
    voteWeight?: true
    attackedBy?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    roomId?: true
    profileId?: true
    socketId?: true
    canTalk?: true
    index?: true
    voteIn?: true
    life?: true
    shield?: true
    isProtected?: true
    alive?: true
    revived?: true
    online?: true
    roleId?: true
    votesReceived?: true
    voteWeight?: true
    roleVisibility?: true
    elimination?: true
    isJailed?: true
    isTrapped?: true
    roleStolen?: true
    isDrugged?: true
    druggedBy?: true
    injected?: true
    voteProtection?: true
    roleVisibilityProtectedWhenDead?: true
    corrupted?: true
    bhTarget?: true
    potionReceived?: true
    attackedBy?: true
    abilitiesEnabled?: true
    canVote?: true
    checkedByAnalyst?: true
    checkedByDetective?: true
    vigiKill?: true
    vigiReveal?: true
    abilityConsumed?: true
    attacked?: true
    trapActive?: true
    playerTrapped?: true
    soldierAttacked?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    roomId?: true
    profileId?: true
    socketId?: true
    canTalk?: true
    index?: true
    voteIn?: true
    life?: true
    shield?: true
    isProtected?: true
    alive?: true
    revived?: true
    online?: true
    roleId?: true
    votesReceived?: true
    voteWeight?: true
    roleVisibility?: true
    elimination?: true
    isJailed?: true
    isTrapped?: true
    roleStolen?: true
    isDrugged?: true
    druggedBy?: true
    injected?: true
    voteProtection?: true
    roleVisibilityProtectedWhenDead?: true
    corrupted?: true
    bhTarget?: true
    potionReceived?: true
    attackedBy?: true
    abilitiesEnabled?: true
    canVote?: true
    checkedByAnalyst?: true
    checkedByDetective?: true
    vigiKill?: true
    vigiReveal?: true
    abilityConsumed?: true
    attacked?: true
    trapActive?: true
    playerTrapped?: true
    soldierAttacked?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    roomId?: true
    profileId?: true
    socketId?: true
    canTalk?: true
    index?: true
    voteIn?: true
    life?: true
    shield?: true
    isProtected?: true
    alive?: true
    revived?: true
    online?: true
    roleId?: true
    votesReceived?: true
    voteWeight?: true
    roleVisibility?: true
    elimination?: true
    isJailed?: true
    isTrapped?: true
    roleStolen?: true
    isDrugged?: true
    druggedBy?: true
    injected?: true
    voteProtection?: true
    roleVisibilityProtectedWhenDead?: true
    corrupted?: true
    bhTarget?: true
    potionReceived?: true
    attackedBy?: true
    abilitiesEnabled?: true
    canVote?: true
    checkedByAnalyst?: true
    checkedByDetective?: true
    vigiKill?: true
    vigiReveal?: true
    abilityConsumed?: true
    attacked?: true
    trapActive?: true
    playerTrapped?: true
    soldierAttacked?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: string
    roomId: string
    profileId: string
    socketId: string | null
    canTalk: boolean
    index: number
    voteIn: number | null
    life: number
    shield: number
    isProtected: boolean
    alive: boolean
    revived: boolean
    online: boolean
    roleId: string | null
    votesReceived: number
    voteWeight: number
    roleVisibility: boolean
    elimination: $Enums.EliminatedBy | null
    isJailed: boolean
    isTrapped: boolean
    roleStolen: boolean
    isDrugged: boolean
    druggedBy: boolean
    injected: $Enums.InjectionType | null
    voteProtection: boolean
    roleVisibilityProtectedWhenDead: boolean
    corrupted: boolean
    bhTarget: boolean
    potionReceived: $Enums.PotionType | null
    attackedBy: number | null
    abilitiesEnabled: boolean
    canVote: boolean
    checkedByAnalyst: boolean
    checkedByDetective: boolean
    vigiKill: boolean
    vigiReveal: boolean
    abilityConsumed: boolean
    attacked: boolean
    trapActive: boolean
    playerTrapped: string | null
    soldierAttacked: boolean
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    profileId?: boolean
    socketId?: boolean
    canTalk?: boolean
    index?: boolean
    voteIn?: boolean
    life?: boolean
    shield?: boolean
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: boolean
    votesReceived?: boolean
    voteWeight?: boolean
    roleVisibility?: boolean
    elimination?: boolean
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: boolean
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: boolean
    attackedBy?: boolean
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: boolean
    soldierAttacked?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    messages?: boolean | Player$messagesArgs<ExtArgs>
    role?: boolean | Player$roleArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    roomId?: boolean
    profileId?: boolean
    socketId?: boolean
    canTalk?: boolean
    index?: boolean
    voteIn?: boolean
    life?: boolean
    shield?: boolean
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: boolean
    votesReceived?: boolean
    voteWeight?: boolean
    roleVisibility?: boolean
    elimination?: boolean
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: boolean
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: boolean
    attackedBy?: boolean
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: boolean
    soldierAttacked?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    messages?: boolean | Player$messagesArgs<ExtArgs>
    role?: boolean | Player$roleArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
      role: Prisma.$RolePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roomId: string
      profileId: string
      socketId: string | null
      canTalk: boolean
      index: number
      voteIn: number | null
      life: number
      shield: number
      isProtected: boolean
      alive: boolean
      revived: boolean
      online: boolean
      roleId: string | null
      votesReceived: number
      voteWeight: number
      roleVisibility: boolean
      elimination: $Enums.EliminatedBy | null
      isJailed: boolean
      isTrapped: boolean
      roleStolen: boolean
      isDrugged: boolean
      druggedBy: boolean
      injected: $Enums.InjectionType | null
      voteProtection: boolean
      roleVisibilityProtectedWhenDead: boolean
      corrupted: boolean
      bhTarget: boolean
      potionReceived: $Enums.PotionType | null
      attackedBy: number | null
      abilitiesEnabled: boolean
      canVote: boolean
      checkedByAnalyst: boolean
      checkedByDetective: boolean
      vigiKill: boolean
      vigiReveal: boolean
      abilityConsumed: boolean
      attacked: boolean
      trapActive: boolean
      playerTrapped: string | null
      soldierAttacked: boolean
    }, ExtArgs["result"]["player"]>
    composites: {}
  }


  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Players.
     *     @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     *     @example
     *     // Create many Players
     *     const player = await prisma.player.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    messages<T extends Player$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Player$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    role<T extends Player$roleArgs<ExtArgs> = {}>(args?: Subset<T, Player$roleArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'String'>
    readonly roomId: FieldRef<"Player", 'String'>
    readonly profileId: FieldRef<"Player", 'String'>
    readonly socketId: FieldRef<"Player", 'String'>
    readonly canTalk: FieldRef<"Player", 'Boolean'>
    readonly index: FieldRef<"Player", 'Int'>
    readonly voteIn: FieldRef<"Player", 'Int'>
    readonly life: FieldRef<"Player", 'Int'>
    readonly shield: FieldRef<"Player", 'Int'>
    readonly isProtected: FieldRef<"Player", 'Boolean'>
    readonly alive: FieldRef<"Player", 'Boolean'>
    readonly revived: FieldRef<"Player", 'Boolean'>
    readonly online: FieldRef<"Player", 'Boolean'>
    readonly roleId: FieldRef<"Player", 'String'>
    readonly votesReceived: FieldRef<"Player", 'Int'>
    readonly voteWeight: FieldRef<"Player", 'Int'>
    readonly roleVisibility: FieldRef<"Player", 'Boolean'>
    readonly elimination: FieldRef<"Player", 'EliminatedBy'>
    readonly isJailed: FieldRef<"Player", 'Boolean'>
    readonly isTrapped: FieldRef<"Player", 'Boolean'>
    readonly roleStolen: FieldRef<"Player", 'Boolean'>
    readonly isDrugged: FieldRef<"Player", 'Boolean'>
    readonly druggedBy: FieldRef<"Player", 'Boolean'>
    readonly injected: FieldRef<"Player", 'InjectionType'>
    readonly voteProtection: FieldRef<"Player", 'Boolean'>
    readonly roleVisibilityProtectedWhenDead: FieldRef<"Player", 'Boolean'>
    readonly corrupted: FieldRef<"Player", 'Boolean'>
    readonly bhTarget: FieldRef<"Player", 'Boolean'>
    readonly potionReceived: FieldRef<"Player", 'PotionType'>
    readonly attackedBy: FieldRef<"Player", 'Int'>
    readonly abilitiesEnabled: FieldRef<"Player", 'Boolean'>
    readonly canVote: FieldRef<"Player", 'Boolean'>
    readonly checkedByAnalyst: FieldRef<"Player", 'Boolean'>
    readonly checkedByDetective: FieldRef<"Player", 'Boolean'>
    readonly vigiKill: FieldRef<"Player", 'Boolean'>
    readonly vigiReveal: FieldRef<"Player", 'Boolean'>
    readonly abilityConsumed: FieldRef<"Player", 'Boolean'>
    readonly attacked: FieldRef<"Player", 'Boolean'>
    readonly trapActive: FieldRef<"Player", 'Boolean'>
    readonly playerTrapped: FieldRef<"Player", 'String'>
    readonly soldierAttacked: FieldRef<"Player", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }


  /**
   * Player.messages
   */
  export type Player$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Player.role
   */
  export type Player$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
  }


  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
  }



  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    aura: $Enums.Aura | null
    team: $Enums.Team | null
    canTalkNight: boolean | null
    description: string | null
    name: string | null
    image: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    aura: $Enums.Aura | null
    team: $Enums.Team | null
    canTalkNight: boolean | null
    description: string | null
    name: string | null
    image: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    aura: number
    team: number
    canTalkNight: number
    description: number
    name: number
    image: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    aura?: true
    team?: true
    canTalkNight?: true
    description?: true
    name?: true
    image?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    aura?: true
    team?: true
    canTalkNight?: true
    description?: true
    name?: true
    image?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    aura?: true
    team?: true
    canTalkNight?: true
    description?: true
    name?: true
    image?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image: string | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aura?: boolean
    team?: boolean
    canTalkNight?: boolean
    description?: boolean
    name?: boolean
    image?: boolean
    players?: boolean | Role$playersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    aura?: boolean
    team?: boolean
    canTalkNight?: boolean
    description?: boolean
    name?: boolean
    image?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | Role$playersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      players: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      aura: $Enums.Aura
      team: $Enums.Team
      canTalkNight: boolean
      description: string
      name: string
      image: string | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    players<T extends Role$playersArgs<ExtArgs> = {}>(args?: Subset<T, Role$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly aura: FieldRef<"Role", 'Aura'>
    readonly team: FieldRef<"Role", 'Team'>
    readonly canTalkNight: FieldRef<"Role", 'Boolean'>
    readonly description: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly image: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }


  /**
   * Role.players
   */
  export type Role$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    bio: 'bio',
    name: 'name',
    userId: 'userId',
    xp: 'xp',
    gender: 'gender',
    wins: 'wins',
    loses: 'loses',
    quits: 'quits',
    deaths: 'deaths'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    turn: 'turn',
    turnNumber: 'turnNumber',
    startedAt: 'startedAt',
    hasVote: 'hasVote',
    voteAnon: 'voteAnon',
    finished: 'finished',
    winner: 'winner',
    soloWinner: 'soloWinner',
    actualTurnStartedAt: 'actualTurnStartedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    content: 'content',
    roomId: 'roomId',
    authorId: 'authorId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    profileId: 'profileId',
    socketId: 'socketId',
    canTalk: 'canTalk',
    index: 'index',
    voteIn: 'voteIn',
    life: 'life',
    shield: 'shield',
    isProtected: 'isProtected',
    alive: 'alive',
    revived: 'revived',
    online: 'online',
    roleId: 'roleId',
    votesReceived: 'votesReceived',
    voteWeight: 'voteWeight',
    roleVisibility: 'roleVisibility',
    elimination: 'elimination',
    isJailed: 'isJailed',
    isTrapped: 'isTrapped',
    roleStolen: 'roleStolen',
    isDrugged: 'isDrugged',
    druggedBy: 'druggedBy',
    injected: 'injected',
    voteProtection: 'voteProtection',
    roleVisibilityProtectedWhenDead: 'roleVisibilityProtectedWhenDead',
    corrupted: 'corrupted',
    bhTarget: 'bhTarget',
    potionReceived: 'potionReceived',
    attackedBy: 'attackedBy',
    abilitiesEnabled: 'abilitiesEnabled',
    canVote: 'canVote',
    checkedByAnalyst: 'checkedByAnalyst',
    checkedByDetective: 'checkedByDetective',
    vigiKill: 'vigiKill',
    vigiReveal: 'vigiReveal',
    abilityConsumed: 'abilityConsumed',
    attacked: 'attacked',
    trapActive: 'trapActive',
    playerTrapped: 'playerTrapped',
    soldierAttacked: 'soldierAttacked'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    aura: 'aura',
    team: 'team',
    canTalkNight: 'canTalkNight',
    description: 'description',
    name: 'name',
    image: 'image'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Turn'
   */
  export type EnumTurnFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Turn'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Team'
   */
  export type EnumTeamFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Team'>
    


  /**
   * Reference to a field of type 'EliminatedBy'
   */
  export type EnumEliminatedByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EliminatedBy'>
    


  /**
   * Reference to a field of type 'InjectionType'
   */
  export type EnumInjectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InjectionType'>
    


  /**
   * Reference to a field of type 'PotionType'
   */
  export type EnumPotionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PotionType'>
    


  /**
   * Reference to a field of type 'Aura'
   */
  export type EnumAuraFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Aura'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    bio?: StringNullableFilter<"Profile"> | string | null
    name?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    xp?: IntFilter<"Profile"> | number
    gender?: StringFilter<"Profile"> | string
    wins?: IntNullableFilter<"Profile"> | number | null
    loses?: IntNullableFilter<"Profile"> | number | null
    quits?: IntNullableFilter<"Profile"> | number | null
    deaths?: IntNullableFilter<"Profile"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    players?: PlayerListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    name?: SortOrder
    userId?: SortOrder
    xp?: SortOrder
    gender?: SortOrder
    wins?: SortOrderInput | SortOrder
    loses?: SortOrderInput | SortOrder
    quits?: SortOrderInput | SortOrder
    deaths?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    players?: PlayerOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    bio?: StringNullableFilter<"Profile"> | string | null
    name?: StringFilter<"Profile"> | string
    xp?: IntFilter<"Profile"> | number
    gender?: StringFilter<"Profile"> | string
    wins?: IntNullableFilter<"Profile"> | number | null
    loses?: IntNullableFilter<"Profile"> | number | null
    quits?: IntNullableFilter<"Profile"> | number | null
    deaths?: IntNullableFilter<"Profile"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    players?: PlayerListRelationFilter
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    name?: SortOrder
    userId?: SortOrder
    xp?: SortOrder
    gender?: SortOrder
    wins?: SortOrderInput | SortOrder
    loses?: SortOrderInput | SortOrder
    quits?: SortOrderInput | SortOrder
    deaths?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    bio?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    name?: StringWithAggregatesFilter<"Profile"> | string
    userId?: StringWithAggregatesFilter<"Profile"> | string
    xp?: IntWithAggregatesFilter<"Profile"> | number
    gender?: StringWithAggregatesFilter<"Profile"> | string
    wins?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    loses?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    quits?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    deaths?: IntNullableWithAggregatesFilter<"Profile"> | number | null
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: StringFilter<"Room"> | string
    turn?: EnumTurnFilter<"Room"> | $Enums.Turn
    turnNumber?: IntFilter<"Room"> | number
    startedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    hasVote?: BoolFilter<"Room"> | boolean
    voteAnon?: BoolFilter<"Room"> | boolean
    finished?: BoolFilter<"Room"> | boolean
    winner?: EnumTeamNullableFilter<"Room"> | $Enums.Team | null
    soloWinner?: StringNullableFilter<"Room"> | string | null
    actualTurnStartedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    players?: PlayerListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    turn?: SortOrder
    turnNumber?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    hasVote?: SortOrder
    voteAnon?: SortOrder
    finished?: SortOrder
    winner?: SortOrderInput | SortOrder
    soloWinner?: SortOrderInput | SortOrder
    actualTurnStartedAt?: SortOrderInput | SortOrder
    players?: PlayerOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    turn?: EnumTurnFilter<"Room"> | $Enums.Turn
    turnNumber?: IntFilter<"Room"> | number
    startedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    hasVote?: BoolFilter<"Room"> | boolean
    voteAnon?: BoolFilter<"Room"> | boolean
    finished?: BoolFilter<"Room"> | boolean
    winner?: EnumTeamNullableFilter<"Room"> | $Enums.Team | null
    soloWinner?: StringNullableFilter<"Room"> | string | null
    actualTurnStartedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    players?: PlayerListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    turn?: SortOrder
    turnNumber?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    hasVote?: SortOrder
    voteAnon?: SortOrder
    finished?: SortOrder
    winner?: SortOrderInput | SortOrder
    soloWinner?: SortOrderInput | SortOrder
    actualTurnStartedAt?: SortOrderInput | SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Room"> | string
    turn?: EnumTurnWithAggregatesFilter<"Room"> | $Enums.Turn
    turnNumber?: IntWithAggregatesFilter<"Room"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"Room"> | Date | string | null
    hasVote?: BoolWithAggregatesFilter<"Room"> | boolean
    voteAnon?: BoolWithAggregatesFilter<"Room"> | boolean
    finished?: BoolWithAggregatesFilter<"Room"> | boolean
    winner?: EnumTeamNullableWithAggregatesFilter<"Room"> | $Enums.Team | null
    soloWinner?: StringNullableWithAggregatesFilter<"Room"> | string | null
    actualTurnStartedAt?: DateTimeNullableWithAggregatesFilter<"Room"> | Date | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    roomId?: StringFilter<"Message"> | string
    authorId?: StringFilter<"Message"> | string
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    author?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    roomId?: SortOrder
    authorId?: SortOrder
    room?: RoomOrderByWithRelationInput
    author?: PlayerOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    createdAt?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    roomId?: StringFilter<"Message"> | string
    authorId?: StringFilter<"Message"> | string
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    author?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    roomId?: SortOrder
    authorId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    content?: StringWithAggregatesFilter<"Message"> | string
    roomId?: StringWithAggregatesFilter<"Message"> | string
    authorId?: StringWithAggregatesFilter<"Message"> | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: StringFilter<"Player"> | string
    roomId?: StringFilter<"Player"> | string
    profileId?: StringFilter<"Player"> | string
    socketId?: StringNullableFilter<"Player"> | string | null
    canTalk?: BoolFilter<"Player"> | boolean
    index?: IntFilter<"Player"> | number
    voteIn?: IntNullableFilter<"Player"> | number | null
    life?: IntFilter<"Player"> | number
    shield?: IntFilter<"Player"> | number
    isProtected?: BoolFilter<"Player"> | boolean
    alive?: BoolFilter<"Player"> | boolean
    revived?: BoolFilter<"Player"> | boolean
    online?: BoolFilter<"Player"> | boolean
    roleId?: StringNullableFilter<"Player"> | string | null
    votesReceived?: IntFilter<"Player"> | number
    voteWeight?: IntFilter<"Player"> | number
    roleVisibility?: BoolFilter<"Player"> | boolean
    elimination?: EnumEliminatedByNullableFilter<"Player"> | $Enums.EliminatedBy | null
    isJailed?: BoolFilter<"Player"> | boolean
    isTrapped?: BoolFilter<"Player"> | boolean
    roleStolen?: BoolFilter<"Player"> | boolean
    isDrugged?: BoolFilter<"Player"> | boolean
    druggedBy?: BoolFilter<"Player"> | boolean
    injected?: EnumInjectionTypeNullableFilter<"Player"> | $Enums.InjectionType | null
    voteProtection?: BoolFilter<"Player"> | boolean
    roleVisibilityProtectedWhenDead?: BoolFilter<"Player"> | boolean
    corrupted?: BoolFilter<"Player"> | boolean
    bhTarget?: BoolFilter<"Player"> | boolean
    potionReceived?: EnumPotionTypeNullableFilter<"Player"> | $Enums.PotionType | null
    attackedBy?: IntNullableFilter<"Player"> | number | null
    abilitiesEnabled?: BoolFilter<"Player"> | boolean
    canVote?: BoolFilter<"Player"> | boolean
    checkedByAnalyst?: BoolFilter<"Player"> | boolean
    checkedByDetective?: BoolFilter<"Player"> | boolean
    vigiKill?: BoolFilter<"Player"> | boolean
    vigiReveal?: BoolFilter<"Player"> | boolean
    abilityConsumed?: BoolFilter<"Player"> | boolean
    attacked?: BoolFilter<"Player"> | boolean
    trapActive?: BoolFilter<"Player"> | boolean
    playerTrapped?: StringNullableFilter<"Player"> | string | null
    soldierAttacked?: BoolFilter<"Player"> | boolean
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    messages?: MessageListRelationFilter
    role?: XOR<RoleNullableRelationFilter, RoleWhereInput> | null
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    profileId?: SortOrder
    socketId?: SortOrderInput | SortOrder
    canTalk?: SortOrder
    index?: SortOrder
    voteIn?: SortOrderInput | SortOrder
    life?: SortOrder
    shield?: SortOrder
    isProtected?: SortOrder
    alive?: SortOrder
    revived?: SortOrder
    online?: SortOrder
    roleId?: SortOrderInput | SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    roleVisibility?: SortOrder
    elimination?: SortOrderInput | SortOrder
    isJailed?: SortOrder
    isTrapped?: SortOrder
    roleStolen?: SortOrder
    isDrugged?: SortOrder
    druggedBy?: SortOrder
    injected?: SortOrderInput | SortOrder
    voteProtection?: SortOrder
    roleVisibilityProtectedWhenDead?: SortOrder
    corrupted?: SortOrder
    bhTarget?: SortOrder
    potionReceived?: SortOrderInput | SortOrder
    attackedBy?: SortOrderInput | SortOrder
    abilitiesEnabled?: SortOrder
    canVote?: SortOrder
    checkedByAnalyst?: SortOrder
    checkedByDetective?: SortOrder
    vigiKill?: SortOrder
    vigiReveal?: SortOrder
    abilityConsumed?: SortOrder
    attacked?: SortOrder
    trapActive?: SortOrder
    playerTrapped?: SortOrderInput | SortOrder
    soldierAttacked?: SortOrder
    room?: RoomOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
    role?: RoleOrderByWithRelationInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    roomId?: StringFilter<"Player"> | string
    profileId?: StringFilter<"Player"> | string
    socketId?: StringNullableFilter<"Player"> | string | null
    canTalk?: BoolFilter<"Player"> | boolean
    index?: IntFilter<"Player"> | number
    voteIn?: IntNullableFilter<"Player"> | number | null
    life?: IntFilter<"Player"> | number
    shield?: IntFilter<"Player"> | number
    isProtected?: BoolFilter<"Player"> | boolean
    alive?: BoolFilter<"Player"> | boolean
    revived?: BoolFilter<"Player"> | boolean
    online?: BoolFilter<"Player"> | boolean
    roleId?: StringNullableFilter<"Player"> | string | null
    votesReceived?: IntFilter<"Player"> | number
    voteWeight?: IntFilter<"Player"> | number
    roleVisibility?: BoolFilter<"Player"> | boolean
    elimination?: EnumEliminatedByNullableFilter<"Player"> | $Enums.EliminatedBy | null
    isJailed?: BoolFilter<"Player"> | boolean
    isTrapped?: BoolFilter<"Player"> | boolean
    roleStolen?: BoolFilter<"Player"> | boolean
    isDrugged?: BoolFilter<"Player"> | boolean
    druggedBy?: BoolFilter<"Player"> | boolean
    injected?: EnumInjectionTypeNullableFilter<"Player"> | $Enums.InjectionType | null
    voteProtection?: BoolFilter<"Player"> | boolean
    roleVisibilityProtectedWhenDead?: BoolFilter<"Player"> | boolean
    corrupted?: BoolFilter<"Player"> | boolean
    bhTarget?: BoolFilter<"Player"> | boolean
    potionReceived?: EnumPotionTypeNullableFilter<"Player"> | $Enums.PotionType | null
    attackedBy?: IntNullableFilter<"Player"> | number | null
    abilitiesEnabled?: BoolFilter<"Player"> | boolean
    canVote?: BoolFilter<"Player"> | boolean
    checkedByAnalyst?: BoolFilter<"Player"> | boolean
    checkedByDetective?: BoolFilter<"Player"> | boolean
    vigiKill?: BoolFilter<"Player"> | boolean
    vigiReveal?: BoolFilter<"Player"> | boolean
    abilityConsumed?: BoolFilter<"Player"> | boolean
    attacked?: BoolFilter<"Player"> | boolean
    trapActive?: BoolFilter<"Player"> | boolean
    playerTrapped?: StringNullableFilter<"Player"> | string | null
    soldierAttacked?: BoolFilter<"Player"> | boolean
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    messages?: MessageListRelationFilter
    role?: XOR<RoleNullableRelationFilter, RoleWhereInput> | null
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    profileId?: SortOrder
    socketId?: SortOrderInput | SortOrder
    canTalk?: SortOrder
    index?: SortOrder
    voteIn?: SortOrderInput | SortOrder
    life?: SortOrder
    shield?: SortOrder
    isProtected?: SortOrder
    alive?: SortOrder
    revived?: SortOrder
    online?: SortOrder
    roleId?: SortOrderInput | SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    roleVisibility?: SortOrder
    elimination?: SortOrderInput | SortOrder
    isJailed?: SortOrder
    isTrapped?: SortOrder
    roleStolen?: SortOrder
    isDrugged?: SortOrder
    druggedBy?: SortOrder
    injected?: SortOrderInput | SortOrder
    voteProtection?: SortOrder
    roleVisibilityProtectedWhenDead?: SortOrder
    corrupted?: SortOrder
    bhTarget?: SortOrder
    potionReceived?: SortOrderInput | SortOrder
    attackedBy?: SortOrderInput | SortOrder
    abilitiesEnabled?: SortOrder
    canVote?: SortOrder
    checkedByAnalyst?: SortOrder
    checkedByDetective?: SortOrder
    vigiKill?: SortOrder
    vigiReveal?: SortOrder
    abilityConsumed?: SortOrder
    attacked?: SortOrder
    trapActive?: SortOrder
    playerTrapped?: SortOrderInput | SortOrder
    soldierAttacked?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Player"> | string
    roomId?: StringWithAggregatesFilter<"Player"> | string
    profileId?: StringWithAggregatesFilter<"Player"> | string
    socketId?: StringNullableWithAggregatesFilter<"Player"> | string | null
    canTalk?: BoolWithAggregatesFilter<"Player"> | boolean
    index?: IntWithAggregatesFilter<"Player"> | number
    voteIn?: IntNullableWithAggregatesFilter<"Player"> | number | null
    life?: IntWithAggregatesFilter<"Player"> | number
    shield?: IntWithAggregatesFilter<"Player"> | number
    isProtected?: BoolWithAggregatesFilter<"Player"> | boolean
    alive?: BoolWithAggregatesFilter<"Player"> | boolean
    revived?: BoolWithAggregatesFilter<"Player"> | boolean
    online?: BoolWithAggregatesFilter<"Player"> | boolean
    roleId?: StringNullableWithAggregatesFilter<"Player"> | string | null
    votesReceived?: IntWithAggregatesFilter<"Player"> | number
    voteWeight?: IntWithAggregatesFilter<"Player"> | number
    roleVisibility?: BoolWithAggregatesFilter<"Player"> | boolean
    elimination?: EnumEliminatedByNullableWithAggregatesFilter<"Player"> | $Enums.EliminatedBy | null
    isJailed?: BoolWithAggregatesFilter<"Player"> | boolean
    isTrapped?: BoolWithAggregatesFilter<"Player"> | boolean
    roleStolen?: BoolWithAggregatesFilter<"Player"> | boolean
    isDrugged?: BoolWithAggregatesFilter<"Player"> | boolean
    druggedBy?: BoolWithAggregatesFilter<"Player"> | boolean
    injected?: EnumInjectionTypeNullableWithAggregatesFilter<"Player"> | $Enums.InjectionType | null
    voteProtection?: BoolWithAggregatesFilter<"Player"> | boolean
    roleVisibilityProtectedWhenDead?: BoolWithAggregatesFilter<"Player"> | boolean
    corrupted?: BoolWithAggregatesFilter<"Player"> | boolean
    bhTarget?: BoolWithAggregatesFilter<"Player"> | boolean
    potionReceived?: EnumPotionTypeNullableWithAggregatesFilter<"Player"> | $Enums.PotionType | null
    attackedBy?: IntNullableWithAggregatesFilter<"Player"> | number | null
    abilitiesEnabled?: BoolWithAggregatesFilter<"Player"> | boolean
    canVote?: BoolWithAggregatesFilter<"Player"> | boolean
    checkedByAnalyst?: BoolWithAggregatesFilter<"Player"> | boolean
    checkedByDetective?: BoolWithAggregatesFilter<"Player"> | boolean
    vigiKill?: BoolWithAggregatesFilter<"Player"> | boolean
    vigiReveal?: BoolWithAggregatesFilter<"Player"> | boolean
    abilityConsumed?: BoolWithAggregatesFilter<"Player"> | boolean
    attacked?: BoolWithAggregatesFilter<"Player"> | boolean
    trapActive?: BoolWithAggregatesFilter<"Player"> | boolean
    playerTrapped?: StringNullableWithAggregatesFilter<"Player"> | string | null
    soldierAttacked?: BoolWithAggregatesFilter<"Player"> | boolean
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    aura?: EnumAuraFilter<"Role"> | $Enums.Aura
    team?: EnumTeamFilter<"Role"> | $Enums.Team
    canTalkNight?: BoolFilter<"Role"> | boolean
    description?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    image?: StringNullableFilter<"Role"> | string | null
    players?: PlayerListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    aura?: SortOrder
    team?: SortOrder
    canTalkNight?: SortOrder
    description?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    players?: PlayerOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    aura?: EnumAuraFilter<"Role"> | $Enums.Aura
    team?: EnumTeamFilter<"Role"> | $Enums.Team
    canTalkNight?: BoolFilter<"Role"> | boolean
    description?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    image?: StringNullableFilter<"Role"> | string | null
    players?: PlayerListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    aura?: SortOrder
    team?: SortOrder
    canTalkNight?: SortOrder
    description?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    aura?: EnumAuraWithAggregatesFilter<"Role"> | $Enums.Aura
    team?: EnumTeamWithAggregatesFilter<"Role"> | $Enums.Team
    canTalkNight?: BoolWithAggregatesFilter<"Role"> | boolean
    description?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    image?: StringNullableWithAggregatesFilter<"Role"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    bio?: string | null
    name: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
    user: UserCreateNestedOneWithoutProfileInput
    players?: PlayerCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    bio?: string | null
    name: string
    userId: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    players?: PlayerUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    bio?: string | null
    name: string
    userId: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoomCreateInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    players?: PlayerCreateNestedManyWithoutRoomInput
    messages?: MessageCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    players?: PlayerUncheckedCreateNestedManyWithoutRoomInput
    messages?: MessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: PlayerUpdateManyWithoutRoomNestedInput
    messages?: MessageUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: PlayerUncheckedUpdateManyWithoutRoomNestedInput
    messages?: MessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
  }

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateInput = {
    id?: string
    createdAt?: Date | string
    content: string
    room: RoomCreateNestedOneWithoutMessagesInput
    author: PlayerCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    content: string
    roomId: string
    authorId: string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    room?: RoomUpdateOneRequiredWithoutMessagesNestedInput
    author?: PlayerUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyInput = {
    id?: string
    createdAt?: Date | string
    content: string
    roomId: string
    authorId: string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateInput = {
    id?: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
    profile: ProfileCreateNestedOneWithoutPlayersInput
    messages?: MessageCreateNestedManyWithoutAuthorInput
    role?: RoleCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: string
    roomId: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type PlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutPlayersNestedInput
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    role?: RoleUpdateOneWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: string
    roomId: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
  }

  export type PlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleCreateInput = {
    id?: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image?: string | null
    players?: PlayerCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image?: string | null
    players?: PlayerUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image?: string | null
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    xp?: SortOrder
    gender?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    quits?: SortOrder
    deaths?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    xp?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    quits?: SortOrder
    deaths?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    xp?: SortOrder
    gender?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    quits?: SortOrder
    deaths?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    xp?: SortOrder
    gender?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    quits?: SortOrder
    deaths?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    xp?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    quits?: SortOrder
    deaths?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTurnFilter<$PrismaModel = never> = {
    equals?: $Enums.Turn | EnumTurnFieldRefInput<$PrismaModel>
    in?: $Enums.Turn[]
    notIn?: $Enums.Turn[]
    not?: NestedEnumTurnFilter<$PrismaModel> | $Enums.Turn
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumTeamNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Team[] | null
    notIn?: $Enums.Team[] | null
    not?: NestedEnumTeamNullableFilter<$PrismaModel> | $Enums.Team | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    turn?: SortOrder
    turnNumber?: SortOrder
    startedAt?: SortOrder
    hasVote?: SortOrder
    voteAnon?: SortOrder
    finished?: SortOrder
    winner?: SortOrder
    soloWinner?: SortOrder
    actualTurnStartedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    turnNumber?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    turn?: SortOrder
    turnNumber?: SortOrder
    startedAt?: SortOrder
    hasVote?: SortOrder
    voteAnon?: SortOrder
    finished?: SortOrder
    winner?: SortOrder
    soloWinner?: SortOrder
    actualTurnStartedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    turn?: SortOrder
    turnNumber?: SortOrder
    startedAt?: SortOrder
    hasVote?: SortOrder
    voteAnon?: SortOrder
    finished?: SortOrder
    winner?: SortOrder
    soloWinner?: SortOrder
    actualTurnStartedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    turnNumber?: SortOrder
  }

  export type EnumTurnWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Turn | EnumTurnFieldRefInput<$PrismaModel>
    in?: $Enums.Turn[]
    notIn?: $Enums.Turn[]
    not?: NestedEnumTurnWithAggregatesFilter<$PrismaModel> | $Enums.Turn
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTurnFilter<$PrismaModel>
    _max?: NestedEnumTurnFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTeamNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Team[] | null
    notIn?: $Enums.Team[] | null
    not?: NestedEnumTeamNullableWithAggregatesFilter<$PrismaModel> | $Enums.Team | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamNullableFilter<$PrismaModel>
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    roomId?: SortOrder
    authorId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    roomId?: SortOrder
    authorId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    roomId?: SortOrder
    authorId?: SortOrder
  }

  export type EnumEliminatedByNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EliminatedBy | EnumEliminatedByFieldRefInput<$PrismaModel> | null
    in?: $Enums.EliminatedBy[] | null
    notIn?: $Enums.EliminatedBy[] | null
    not?: NestedEnumEliminatedByNullableFilter<$PrismaModel> | $Enums.EliminatedBy | null
  }

  export type EnumInjectionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InjectionType | EnumInjectionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InjectionType[] | null
    notIn?: $Enums.InjectionType[] | null
    not?: NestedEnumInjectionTypeNullableFilter<$PrismaModel> | $Enums.InjectionType | null
  }

  export type EnumPotionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PotionType | EnumPotionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PotionType[] | null
    notIn?: $Enums.PotionType[] | null
    not?: NestedEnumPotionTypeNullableFilter<$PrismaModel> | $Enums.PotionType | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type RoleNullableRelationFilter = {
    is?: RoleWhereInput | null
    isNot?: RoleWhereInput | null
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    profileId?: SortOrder
    socketId?: SortOrder
    canTalk?: SortOrder
    index?: SortOrder
    voteIn?: SortOrder
    life?: SortOrder
    shield?: SortOrder
    isProtected?: SortOrder
    alive?: SortOrder
    revived?: SortOrder
    online?: SortOrder
    roleId?: SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    roleVisibility?: SortOrder
    elimination?: SortOrder
    isJailed?: SortOrder
    isTrapped?: SortOrder
    roleStolen?: SortOrder
    isDrugged?: SortOrder
    druggedBy?: SortOrder
    injected?: SortOrder
    voteProtection?: SortOrder
    roleVisibilityProtectedWhenDead?: SortOrder
    corrupted?: SortOrder
    bhTarget?: SortOrder
    potionReceived?: SortOrder
    attackedBy?: SortOrder
    abilitiesEnabled?: SortOrder
    canVote?: SortOrder
    checkedByAnalyst?: SortOrder
    checkedByDetective?: SortOrder
    vigiKill?: SortOrder
    vigiReveal?: SortOrder
    abilityConsumed?: SortOrder
    attacked?: SortOrder
    trapActive?: SortOrder
    playerTrapped?: SortOrder
    soldierAttacked?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    index?: SortOrder
    voteIn?: SortOrder
    life?: SortOrder
    shield?: SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    attackedBy?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    profileId?: SortOrder
    socketId?: SortOrder
    canTalk?: SortOrder
    index?: SortOrder
    voteIn?: SortOrder
    life?: SortOrder
    shield?: SortOrder
    isProtected?: SortOrder
    alive?: SortOrder
    revived?: SortOrder
    online?: SortOrder
    roleId?: SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    roleVisibility?: SortOrder
    elimination?: SortOrder
    isJailed?: SortOrder
    isTrapped?: SortOrder
    roleStolen?: SortOrder
    isDrugged?: SortOrder
    druggedBy?: SortOrder
    injected?: SortOrder
    voteProtection?: SortOrder
    roleVisibilityProtectedWhenDead?: SortOrder
    corrupted?: SortOrder
    bhTarget?: SortOrder
    potionReceived?: SortOrder
    attackedBy?: SortOrder
    abilitiesEnabled?: SortOrder
    canVote?: SortOrder
    checkedByAnalyst?: SortOrder
    checkedByDetective?: SortOrder
    vigiKill?: SortOrder
    vigiReveal?: SortOrder
    abilityConsumed?: SortOrder
    attacked?: SortOrder
    trapActive?: SortOrder
    playerTrapped?: SortOrder
    soldierAttacked?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    profileId?: SortOrder
    socketId?: SortOrder
    canTalk?: SortOrder
    index?: SortOrder
    voteIn?: SortOrder
    life?: SortOrder
    shield?: SortOrder
    isProtected?: SortOrder
    alive?: SortOrder
    revived?: SortOrder
    online?: SortOrder
    roleId?: SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    roleVisibility?: SortOrder
    elimination?: SortOrder
    isJailed?: SortOrder
    isTrapped?: SortOrder
    roleStolen?: SortOrder
    isDrugged?: SortOrder
    druggedBy?: SortOrder
    injected?: SortOrder
    voteProtection?: SortOrder
    roleVisibilityProtectedWhenDead?: SortOrder
    corrupted?: SortOrder
    bhTarget?: SortOrder
    potionReceived?: SortOrder
    attackedBy?: SortOrder
    abilitiesEnabled?: SortOrder
    canVote?: SortOrder
    checkedByAnalyst?: SortOrder
    checkedByDetective?: SortOrder
    vigiKill?: SortOrder
    vigiReveal?: SortOrder
    abilityConsumed?: SortOrder
    attacked?: SortOrder
    trapActive?: SortOrder
    playerTrapped?: SortOrder
    soldierAttacked?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    index?: SortOrder
    voteIn?: SortOrder
    life?: SortOrder
    shield?: SortOrder
    votesReceived?: SortOrder
    voteWeight?: SortOrder
    attackedBy?: SortOrder
  }

  export type EnumEliminatedByNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EliminatedBy | EnumEliminatedByFieldRefInput<$PrismaModel> | null
    in?: $Enums.EliminatedBy[] | null
    notIn?: $Enums.EliminatedBy[] | null
    not?: NestedEnumEliminatedByNullableWithAggregatesFilter<$PrismaModel> | $Enums.EliminatedBy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEliminatedByNullableFilter<$PrismaModel>
    _max?: NestedEnumEliminatedByNullableFilter<$PrismaModel>
  }

  export type EnumInjectionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InjectionType | EnumInjectionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InjectionType[] | null
    notIn?: $Enums.InjectionType[] | null
    not?: NestedEnumInjectionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InjectionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInjectionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumInjectionTypeNullableFilter<$PrismaModel>
  }

  export type EnumPotionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PotionType | EnumPotionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PotionType[] | null
    notIn?: $Enums.PotionType[] | null
    not?: NestedEnumPotionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PotionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPotionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPotionTypeNullableFilter<$PrismaModel>
  }

  export type EnumAuraFilter<$PrismaModel = never> = {
    equals?: $Enums.Aura | EnumAuraFieldRefInput<$PrismaModel>
    in?: $Enums.Aura[]
    notIn?: $Enums.Aura[]
    not?: NestedEnumAuraFilter<$PrismaModel> | $Enums.Aura
  }

  export type EnumTeamFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel>
    in?: $Enums.Team[]
    notIn?: $Enums.Team[]
    not?: NestedEnumTeamFilter<$PrismaModel> | $Enums.Team
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    aura?: SortOrder
    team?: SortOrder
    canTalkNight?: SortOrder
    description?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    aura?: SortOrder
    team?: SortOrder
    canTalkNight?: SortOrder
    description?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    aura?: SortOrder
    team?: SortOrder
    canTalkNight?: SortOrder
    description?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type EnumAuraWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Aura | EnumAuraFieldRefInput<$PrismaModel>
    in?: $Enums.Aura[]
    notIn?: $Enums.Aura[]
    not?: NestedEnumAuraWithAggregatesFilter<$PrismaModel> | $Enums.Aura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuraFilter<$PrismaModel>
    _max?: NestedEnumAuraFilter<$PrismaModel>
  }

  export type EnumTeamWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel>
    in?: $Enums.Team[]
    notIn?: $Enums.Team[]
    not?: NestedEnumTeamWithAggregatesFilter<$PrismaModel> | $Enums.Team
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamFilter<$PrismaModel>
    _max?: NestedEnumTeamFilter<$PrismaModel>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type PlayerCreateNestedManyWithoutProfileInput = {
    create?: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput> | PlayerCreateWithoutProfileInput[] | PlayerUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProfileInput | PlayerCreateOrConnectWithoutProfileInput[]
    createMany?: PlayerCreateManyProfileInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput> | PlayerCreateWithoutProfileInput[] | PlayerUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProfileInput | PlayerCreateOrConnectWithoutProfileInput[]
    createMany?: PlayerCreateManyProfileInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type PlayerUpdateManyWithoutProfileNestedInput = {
    create?: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput> | PlayerCreateWithoutProfileInput[] | PlayerUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProfileInput | PlayerCreateOrConnectWithoutProfileInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutProfileInput | PlayerUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: PlayerCreateManyProfileInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutProfileInput | PlayerUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutProfileInput | PlayerUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput> | PlayerCreateWithoutProfileInput[] | PlayerUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProfileInput | PlayerCreateOrConnectWithoutProfileInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutProfileInput | PlayerUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: PlayerCreateManyProfileInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutProfileInput | PlayerUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutProfileInput | PlayerUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerCreateNestedManyWithoutRoomInput = {
    create?: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput> | PlayerCreateWithoutRoomInput[] | PlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoomInput | PlayerCreateOrConnectWithoutRoomInput[]
    createMany?: PlayerCreateManyRoomInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutRoomInput = {
    create?: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput> | MessageCreateWithoutRoomInput[] | MessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRoomInput | MessageCreateOrConnectWithoutRoomInput[]
    createMany?: MessageCreateManyRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput> | PlayerCreateWithoutRoomInput[] | PlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoomInput | PlayerCreateOrConnectWithoutRoomInput[]
    createMany?: PlayerCreateManyRoomInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput> | MessageCreateWithoutRoomInput[] | MessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRoomInput | MessageCreateOrConnectWithoutRoomInput[]
    createMany?: MessageCreateManyRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumTurnFieldUpdateOperationsInput = {
    set?: $Enums.Turn
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumTeamFieldUpdateOperationsInput = {
    set?: $Enums.Team | null
  }

  export type PlayerUpdateManyWithoutRoomNestedInput = {
    create?: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput> | PlayerCreateWithoutRoomInput[] | PlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoomInput | PlayerCreateOrConnectWithoutRoomInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutRoomInput | PlayerUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: PlayerCreateManyRoomInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutRoomInput | PlayerUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutRoomInput | PlayerUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutRoomNestedInput = {
    create?: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput> | MessageCreateWithoutRoomInput[] | MessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRoomInput | MessageCreateOrConnectWithoutRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutRoomInput | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: MessageCreateManyRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutRoomInput | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutRoomInput | MessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput> | PlayerCreateWithoutRoomInput[] | PlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoomInput | PlayerCreateOrConnectWithoutRoomInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutRoomInput | PlayerUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: PlayerCreateManyRoomInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutRoomInput | PlayerUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutRoomInput | PlayerUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput> | MessageCreateWithoutRoomInput[] | MessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRoomInput | MessageCreateOrConnectWithoutRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutRoomInput | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: MessageCreateManyRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutRoomInput | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutRoomInput | MessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMessagesInput
    connect?: RoomWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutMessagesInput = {
    create?: XOR<PlayerCreateWithoutMessagesInput, PlayerUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMessagesInput
    connect?: PlayerWhereUniqueInput
  }

  export type RoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMessagesInput
    upsert?: RoomUpsertWithoutMessagesInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutMessagesInput, RoomUpdateWithoutMessagesInput>, RoomUncheckedUpdateWithoutMessagesInput>
  }

  export type PlayerUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<PlayerCreateWithoutMessagesInput, PlayerUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMessagesInput
    upsert?: PlayerUpsertWithoutMessagesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMessagesInput, PlayerUpdateWithoutMessagesInput>, PlayerUncheckedUpdateWithoutMessagesInput>
  }

  export type RoomCreateNestedOneWithoutPlayersInput = {
    create?: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutPlayersInput
    connect?: RoomWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutPlayersInput = {
    create?: XOR<ProfileCreateWithoutPlayersInput, ProfileUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPlayersInput
    connect?: ProfileWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type RoleCreateNestedOneWithoutPlayersInput = {
    create?: XOR<RoleCreateWithoutPlayersInput, RoleUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPlayersInput
    connect?: RoleWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NullableEnumEliminatedByFieldUpdateOperationsInput = {
    set?: $Enums.EliminatedBy | null
  }

  export type NullableEnumInjectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.InjectionType | null
  }

  export type NullableEnumPotionTypeFieldUpdateOperationsInput = {
    set?: $Enums.PotionType | null
  }

  export type RoomUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutPlayersInput
    upsert?: RoomUpsertWithoutPlayersInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutPlayersInput, RoomUpdateWithoutPlayersInput>, RoomUncheckedUpdateWithoutPlayersInput>
  }

  export type ProfileUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<ProfileCreateWithoutPlayersInput, ProfileUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPlayersInput
    upsert?: ProfileUpsertWithoutPlayersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutPlayersInput, ProfileUpdateWithoutPlayersInput>, ProfileUncheckedUpdateWithoutPlayersInput>
  }

  export type MessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAuthorInput | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAuthorInput | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAuthorInput | MessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoleUpdateOneWithoutPlayersNestedInput = {
    create?: XOR<RoleCreateWithoutPlayersInput, RoleUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPlayersInput
    upsert?: RoleUpsertWithoutPlayersInput
    disconnect?: RoleWhereInput | boolean
    delete?: RoleWhereInput | boolean
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPlayersInput, RoleUpdateWithoutPlayersInput>, RoleUncheckedUpdateWithoutPlayersInput>
  }

  export type MessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAuthorInput | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAuthorInput | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAuthorInput | MessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type PlayerCreateNestedManyWithoutRoleInput = {
    create?: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput> | PlayerCreateWithoutRoleInput[] | PlayerUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoleInput | PlayerCreateOrConnectWithoutRoleInput[]
    createMany?: PlayerCreateManyRoleInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput> | PlayerCreateWithoutRoleInput[] | PlayerUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoleInput | PlayerCreateOrConnectWithoutRoleInput[]
    createMany?: PlayerCreateManyRoleInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type EnumAuraFieldUpdateOperationsInput = {
    set?: $Enums.Aura
  }

  export type EnumTeamFieldUpdateOperationsInput = {
    set?: $Enums.Team
  }

  export type PlayerUpdateManyWithoutRoleNestedInput = {
    create?: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput> | PlayerCreateWithoutRoleInput[] | PlayerUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoleInput | PlayerCreateOrConnectWithoutRoleInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutRoleInput | PlayerUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: PlayerCreateManyRoleInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutRoleInput | PlayerUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutRoleInput | PlayerUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput> | PlayerCreateWithoutRoleInput[] | PlayerUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutRoleInput | PlayerCreateOrConnectWithoutRoleInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutRoleInput | PlayerUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: PlayerCreateManyRoleInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutRoleInput | PlayerUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutRoleInput | PlayerUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTurnFilter<$PrismaModel = never> = {
    equals?: $Enums.Turn | EnumTurnFieldRefInput<$PrismaModel>
    in?: $Enums.Turn[]
    notIn?: $Enums.Turn[]
    not?: NestedEnumTurnFilter<$PrismaModel> | $Enums.Turn
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTeamNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Team[] | null
    notIn?: $Enums.Team[] | null
    not?: NestedEnumTeamNullableFilter<$PrismaModel> | $Enums.Team | null
  }

  export type NestedEnumTurnWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Turn | EnumTurnFieldRefInput<$PrismaModel>
    in?: $Enums.Turn[]
    notIn?: $Enums.Turn[]
    not?: NestedEnumTurnWithAggregatesFilter<$PrismaModel> | $Enums.Turn
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTurnFilter<$PrismaModel>
    _max?: NestedEnumTurnFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTeamNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Team[] | null
    notIn?: $Enums.Team[] | null
    not?: NestedEnumTeamNullableWithAggregatesFilter<$PrismaModel> | $Enums.Team | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamNullableFilter<$PrismaModel>
  }

  export type NestedEnumEliminatedByNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EliminatedBy | EnumEliminatedByFieldRefInput<$PrismaModel> | null
    in?: $Enums.EliminatedBy[] | null
    notIn?: $Enums.EliminatedBy[] | null
    not?: NestedEnumEliminatedByNullableFilter<$PrismaModel> | $Enums.EliminatedBy | null
  }

  export type NestedEnumInjectionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InjectionType | EnumInjectionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InjectionType[] | null
    notIn?: $Enums.InjectionType[] | null
    not?: NestedEnumInjectionTypeNullableFilter<$PrismaModel> | $Enums.InjectionType | null
  }

  export type NestedEnumPotionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PotionType | EnumPotionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PotionType[] | null
    notIn?: $Enums.PotionType[] | null
    not?: NestedEnumPotionTypeNullableFilter<$PrismaModel> | $Enums.PotionType | null
  }

  export type NestedEnumEliminatedByNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EliminatedBy | EnumEliminatedByFieldRefInput<$PrismaModel> | null
    in?: $Enums.EliminatedBy[] | null
    notIn?: $Enums.EliminatedBy[] | null
    not?: NestedEnumEliminatedByNullableWithAggregatesFilter<$PrismaModel> | $Enums.EliminatedBy | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEliminatedByNullableFilter<$PrismaModel>
    _max?: NestedEnumEliminatedByNullableFilter<$PrismaModel>
  }

  export type NestedEnumInjectionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InjectionType | EnumInjectionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InjectionType[] | null
    notIn?: $Enums.InjectionType[] | null
    not?: NestedEnumInjectionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InjectionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInjectionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumInjectionTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPotionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PotionType | EnumPotionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PotionType[] | null
    notIn?: $Enums.PotionType[] | null
    not?: NestedEnumPotionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PotionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPotionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPotionTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAuraFilter<$PrismaModel = never> = {
    equals?: $Enums.Aura | EnumAuraFieldRefInput<$PrismaModel>
    in?: $Enums.Aura[]
    notIn?: $Enums.Aura[]
    not?: NestedEnumAuraFilter<$PrismaModel> | $Enums.Aura
  }

  export type NestedEnumTeamFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel>
    in?: $Enums.Team[]
    notIn?: $Enums.Team[]
    not?: NestedEnumTeamFilter<$PrismaModel> | $Enums.Team
  }

  export type NestedEnumAuraWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Aura | EnumAuraFieldRefInput<$PrismaModel>
    in?: $Enums.Aura[]
    notIn?: $Enums.Aura[]
    not?: NestedEnumAuraWithAggregatesFilter<$PrismaModel> | $Enums.Aura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuraFilter<$PrismaModel>
    _max?: NestedEnumAuraFilter<$PrismaModel>
  }

  export type NestedEnumTeamWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Team | EnumTeamFieldRefInput<$PrismaModel>
    in?: $Enums.Team[]
    notIn?: $Enums.Team[]
    not?: NestedEnumTeamWithAggregatesFilter<$PrismaModel> | $Enums.Team
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamFilter<$PrismaModel>
    _max?: NestedEnumTeamFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    name: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
    players?: PlayerCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    name: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type PlayerCreateWithoutProfileInput = {
    id?: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
    messages?: MessageCreateNestedManyWithoutAuthorInput
    role?: RoleCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutProfileInput = {
    id?: string
    roomId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type PlayerCreateOrConnectWithoutProfileInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput>
  }

  export type PlayerCreateManyProfileInputEnvelope = {
    data: PlayerCreateManyProfileInput | PlayerCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUpsertWithWhereUniqueWithoutProfileInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutProfileInput, PlayerUncheckedUpdateWithoutProfileInput>
    create: XOR<PlayerCreateWithoutProfileInput, PlayerUncheckedCreateWithoutProfileInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutProfileInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutProfileInput, PlayerUncheckedUpdateWithoutProfileInput>
  }

  export type PlayerUpdateManyWithWhereWithoutProfileInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutProfileInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: StringFilter<"Player"> | string
    roomId?: StringFilter<"Player"> | string
    profileId?: StringFilter<"Player"> | string
    socketId?: StringNullableFilter<"Player"> | string | null
    canTalk?: BoolFilter<"Player"> | boolean
    index?: IntFilter<"Player"> | number
    voteIn?: IntNullableFilter<"Player"> | number | null
    life?: IntFilter<"Player"> | number
    shield?: IntFilter<"Player"> | number
    isProtected?: BoolFilter<"Player"> | boolean
    alive?: BoolFilter<"Player"> | boolean
    revived?: BoolFilter<"Player"> | boolean
    online?: BoolFilter<"Player"> | boolean
    roleId?: StringNullableFilter<"Player"> | string | null
    votesReceived?: IntFilter<"Player"> | number
    voteWeight?: IntFilter<"Player"> | number
    roleVisibility?: BoolFilter<"Player"> | boolean
    elimination?: EnumEliminatedByNullableFilter<"Player"> | $Enums.EliminatedBy | null
    isJailed?: BoolFilter<"Player"> | boolean
    isTrapped?: BoolFilter<"Player"> | boolean
    roleStolen?: BoolFilter<"Player"> | boolean
    isDrugged?: BoolFilter<"Player"> | boolean
    druggedBy?: BoolFilter<"Player"> | boolean
    injected?: EnumInjectionTypeNullableFilter<"Player"> | $Enums.InjectionType | null
    voteProtection?: BoolFilter<"Player"> | boolean
    roleVisibilityProtectedWhenDead?: BoolFilter<"Player"> | boolean
    corrupted?: BoolFilter<"Player"> | boolean
    bhTarget?: BoolFilter<"Player"> | boolean
    potionReceived?: EnumPotionTypeNullableFilter<"Player"> | $Enums.PotionType | null
    attackedBy?: IntNullableFilter<"Player"> | number | null
    abilitiesEnabled?: BoolFilter<"Player"> | boolean
    canVote?: BoolFilter<"Player"> | boolean
    checkedByAnalyst?: BoolFilter<"Player"> | boolean
    checkedByDetective?: BoolFilter<"Player"> | boolean
    vigiKill?: BoolFilter<"Player"> | boolean
    vigiReveal?: BoolFilter<"Player"> | boolean
    abilityConsumed?: BoolFilter<"Player"> | boolean
    attacked?: BoolFilter<"Player"> | boolean
    trapActive?: BoolFilter<"Player"> | boolean
    playerTrapped?: StringNullableFilter<"Player"> | string | null
    soldierAttacked?: BoolFilter<"Player"> | boolean
  }

  export type PlayerCreateWithoutRoomInput = {
    id?: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    profile: ProfileCreateNestedOneWithoutPlayersInput
    messages?: MessageCreateNestedManyWithoutAuthorInput
    role?: RoleCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutRoomInput = {
    id?: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type PlayerCreateOrConnectWithoutRoomInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput>
  }

  export type PlayerCreateManyRoomInputEnvelope = {
    data: PlayerCreateManyRoomInput | PlayerCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutRoomInput = {
    id?: string
    createdAt?: Date | string
    content: string
    author: PlayerCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutRoomInput = {
    id?: string
    createdAt?: Date | string
    content: string
    authorId: string
  }

  export type MessageCreateOrConnectWithoutRoomInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput>
  }

  export type MessageCreateManyRoomInputEnvelope = {
    data: MessageCreateManyRoomInput | MessageCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithWhereUniqueWithoutRoomInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutRoomInput, PlayerUncheckedUpdateWithoutRoomInput>
    create: XOR<PlayerCreateWithoutRoomInput, PlayerUncheckedCreateWithoutRoomInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutRoomInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutRoomInput, PlayerUncheckedUpdateWithoutRoomInput>
  }

  export type PlayerUpdateManyWithWhereWithoutRoomInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutRoomInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutRoomInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutRoomInput, MessageUncheckedUpdateWithoutRoomInput>
    create: XOR<MessageCreateWithoutRoomInput, MessageUncheckedCreateWithoutRoomInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutRoomInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutRoomInput, MessageUncheckedUpdateWithoutRoomInput>
  }

  export type MessageUpdateManyWithWhereWithoutRoomInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutRoomInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    roomId?: StringFilter<"Message"> | string
    authorId?: StringFilter<"Message"> | string
  }

  export type RoomCreateWithoutMessagesInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    players?: PlayerCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutMessagesInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    players?: PlayerUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutMessagesInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
  }

  export type PlayerCreateWithoutMessagesInput = {
    id?: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
    profile: ProfileCreateNestedOneWithoutPlayersInput
    role?: RoleCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutMessagesInput = {
    id?: string
    roomId: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
  }

  export type PlayerCreateOrConnectWithoutMessagesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMessagesInput, PlayerUncheckedCreateWithoutMessagesInput>
  }

  export type RoomUpsertWithoutMessagesInput = {
    update: XOR<RoomUpdateWithoutMessagesInput, RoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutMessagesInput, RoomUncheckedUpdateWithoutMessagesInput>
  }

  export type RoomUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: PlayerUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: PlayerUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type PlayerUpsertWithoutMessagesInput = {
    update: XOR<PlayerUpdateWithoutMessagesInput, PlayerUncheckedUpdateWithoutMessagesInput>
    create: XOR<PlayerCreateWithoutMessagesInput, PlayerUncheckedCreateWithoutMessagesInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMessagesInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMessagesInput, PlayerUncheckedUpdateWithoutMessagesInput>
  }

  export type PlayerUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutPlayersNestedInput
    role?: RoleUpdateOneWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomCreateWithoutPlayersInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    messages?: MessageCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutPlayersInput = {
    id?: string
    turn?: $Enums.Turn
    turnNumber?: number
    startedAt?: Date | string | null
    hasVote: boolean
    voteAnon: boolean
    finished: boolean
    winner?: $Enums.Team | null
    soloWinner?: string | null
    actualTurnStartedAt?: Date | string | null
    messages?: MessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutPlayersInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
  }

  export type ProfileCreateWithoutPlayersInput = {
    id?: string
    bio?: string | null
    name: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPlayersInput = {
    id?: string
    bio?: string | null
    name: string
    userId: string
    xp: number
    gender: string
    wins?: number | null
    loses?: number | null
    quits?: number | null
    deaths?: number | null
  }

  export type ProfileCreateOrConnectWithoutPlayersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPlayersInput, ProfileUncheckedCreateWithoutPlayersInput>
  }

  export type MessageCreateWithoutAuthorInput = {
    id?: string
    createdAt?: Date | string
    content: string
    room: RoomCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutAuthorInput = {
    id?: string
    createdAt?: Date | string
    content: string
    roomId: string
  }

  export type MessageCreateOrConnectWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageCreateManyAuthorInputEnvelope = {
    data: MessageCreateManyAuthorInput | MessageCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutPlayersInput = {
    id?: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image?: string | null
  }

  export type RoleUncheckedCreateWithoutPlayersInput = {
    id?: string
    aura: $Enums.Aura
    team: $Enums.Team
    canTalkNight: boolean
    description: string
    name: string
    image?: string | null
  }

  export type RoleCreateOrConnectWithoutPlayersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPlayersInput, RoleUncheckedCreateWithoutPlayersInput>
  }

  export type RoomUpsertWithoutPlayersInput = {
    update: XOR<RoomUpdateWithoutPlayersInput, RoomUncheckedUpdateWithoutPlayersInput>
    create: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutPlayersInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutPlayersInput, RoomUncheckedUpdateWithoutPlayersInput>
  }

  export type RoomUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: MessageUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    turn?: EnumTurnFieldUpdateOperationsInput | $Enums.Turn
    turnNumber?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasVote?: BoolFieldUpdateOperationsInput | boolean
    voteAnon?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    winner?: NullableEnumTeamFieldUpdateOperationsInput | $Enums.Team | null
    soloWinner?: NullableStringFieldUpdateOperationsInput | string | null
    actualTurnStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: MessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ProfileUpsertWithoutPlayersInput = {
    update: XOR<ProfileUpdateWithoutPlayersInput, ProfileUncheckedUpdateWithoutPlayersInput>
    create: XOR<ProfileCreateWithoutPlayersInput, ProfileUncheckedCreateWithoutPlayersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutPlayersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutPlayersInput, ProfileUncheckedUpdateWithoutPlayersInput>
  }

  export type ProfileUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    loses?: NullableIntFieldUpdateOperationsInput | number | null
    quits?: NullableIntFieldUpdateOperationsInput | number | null
    deaths?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
  }

  export type MessageUpdateManyWithWhereWithoutAuthorInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutAuthorInput>
  }

  export type RoleUpsertWithoutPlayersInput = {
    update: XOR<RoleUpdateWithoutPlayersInput, RoleUncheckedUpdateWithoutPlayersInput>
    create: XOR<RoleCreateWithoutPlayersInput, RoleUncheckedCreateWithoutPlayersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPlayersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPlayersInput, RoleUncheckedUpdateWithoutPlayersInput>
  }

  export type RoleUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    aura?: EnumAuraFieldUpdateOperationsInput | $Enums.Aura
    team?: EnumTeamFieldUpdateOperationsInput | $Enums.Team
    canTalkNight?: BoolFieldUpdateOperationsInput | boolean
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlayerCreateWithoutRoleInput = {
    id?: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
    profile: ProfileCreateNestedOneWithoutPlayersInput
    messages?: MessageCreateNestedManyWithoutAuthorInput
  }

  export type PlayerUncheckedCreateWithoutRoleInput = {
    id?: string
    roomId: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type PlayerCreateOrConnectWithoutRoleInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput>
  }

  export type PlayerCreateManyRoleInputEnvelope = {
    data: PlayerCreateManyRoleInput | PlayerCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithWhereUniqueWithoutRoleInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutRoleInput, PlayerUncheckedUpdateWithoutRoleInput>
    create: XOR<PlayerCreateWithoutRoleInput, PlayerUncheckedCreateWithoutRoleInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutRoleInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutRoleInput, PlayerUncheckedUpdateWithoutRoleInput>
  }

  export type PlayerUpdateManyWithWhereWithoutRoleInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutRoleInput>
  }

  export type PlayerCreateManyProfileInput = {
    id?: string
    roomId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
  }

  export type PlayerUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    role?: RoleUpdateOneWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerCreateManyRoomInput = {
    id?: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    roleId?: string | null
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
  }

  export type MessageCreateManyRoomInput = {
    id?: string
    createdAt?: Date | string
    content: string
    authorId: string
  }

  export type PlayerUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    profile?: ProfileUpdateOneRequiredWithoutPlayersNestedInput
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    role?: RoleUpdateOneWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    author?: PlayerUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyAuthorInput = {
    id?: string
    createdAt?: Date | string
    content: string
    roomId: string
  }

  export type MessageUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    room?: RoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateManyRoleInput = {
    id?: string
    roomId: string
    profileId: string
    socketId?: string | null
    canTalk?: boolean
    index: number
    voteIn?: number | null
    life?: number
    shield?: number
    isProtected?: boolean
    alive?: boolean
    revived?: boolean
    online?: boolean
    votesReceived?: number
    voteWeight?: number
    roleVisibility?: boolean
    elimination?: $Enums.EliminatedBy | null
    isJailed?: boolean
    isTrapped?: boolean
    roleStolen?: boolean
    isDrugged?: boolean
    druggedBy?: boolean
    injected?: $Enums.InjectionType | null
    voteProtection?: boolean
    roleVisibilityProtectedWhenDead?: boolean
    corrupted?: boolean
    bhTarget?: boolean
    potionReceived?: $Enums.PotionType | null
    attackedBy?: number | null
    abilitiesEnabled?: boolean
    canVote?: boolean
    checkedByAnalyst?: boolean
    checkedByDetective?: boolean
    vigiKill?: boolean
    vigiReveal?: boolean
    abilityConsumed?: boolean
    attacked?: boolean
    trapActive?: boolean
    playerTrapped?: string | null
    soldierAttacked?: boolean
  }

  export type PlayerUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutPlayersNestedInput
    messages?: MessageUpdateManyWithoutAuthorNestedInput
  }

  export type PlayerUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    socketId?: NullableStringFieldUpdateOperationsInput | string | null
    canTalk?: BoolFieldUpdateOperationsInput | boolean
    index?: IntFieldUpdateOperationsInput | number
    voteIn?: NullableIntFieldUpdateOperationsInput | number | null
    life?: IntFieldUpdateOperationsInput | number
    shield?: IntFieldUpdateOperationsInput | number
    isProtected?: BoolFieldUpdateOperationsInput | boolean
    alive?: BoolFieldUpdateOperationsInput | boolean
    revived?: BoolFieldUpdateOperationsInput | boolean
    online?: BoolFieldUpdateOperationsInput | boolean
    votesReceived?: IntFieldUpdateOperationsInput | number
    voteWeight?: IntFieldUpdateOperationsInput | number
    roleVisibility?: BoolFieldUpdateOperationsInput | boolean
    elimination?: NullableEnumEliminatedByFieldUpdateOperationsInput | $Enums.EliminatedBy | null
    isJailed?: BoolFieldUpdateOperationsInput | boolean
    isTrapped?: BoolFieldUpdateOperationsInput | boolean
    roleStolen?: BoolFieldUpdateOperationsInput | boolean
    isDrugged?: BoolFieldUpdateOperationsInput | boolean
    druggedBy?: BoolFieldUpdateOperationsInput | boolean
    injected?: NullableEnumInjectionTypeFieldUpdateOperationsInput | $Enums.InjectionType | null
    voteProtection?: BoolFieldUpdateOperationsInput | boolean
    roleVisibilityProtectedWhenDead?: BoolFieldUpdateOperationsInput | boolean
    corrupted?: BoolFieldUpdateOperationsInput | boolean
    bhTarget?: BoolFieldUpdateOperationsInput | boolean
    potionReceived?: NullableEnumPotionTypeFieldUpdateOperationsInput | $Enums.PotionType | null
    attackedBy?: NullableIntFieldUpdateOperationsInput | number | null
    abilitiesEnabled?: BoolFieldUpdateOperationsInput | boolean
    canVote?: BoolFieldUpdateOperationsInput | boolean
    checkedByAnalyst?: BoolFieldUpdateOperationsInput | boolean
    checkedByDetective?: BoolFieldUpdateOperationsInput | boolean
    vigiKill?: BoolFieldUpdateOperationsInput | boolean
    vigiReveal?: BoolFieldUpdateOperationsInput | boolean
    abilityConsumed?: BoolFieldUpdateOperationsInput | boolean
    attacked?: BoolFieldUpdateOperationsInput | boolean
    trapActive?: BoolFieldUpdateOperationsInput | boolean
    playerTrapped?: NullableStringFieldUpdateOperationsInput | string | null
    soldierAttacked?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProfileCountOutputTypeDefaultArgs instead
     */
    export type ProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomCountOutputTypeDefaultArgs instead
     */
    export type RoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomDefaultArgs instead
     */
    export type RoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}